if(TARGET_ARCH STREQUAL "arm" AND HARDFLOAT STREQUAL "false" AND ARMCPU STREQUAL "")
    message(FATAL_ERROR "arm-linux-gnueabi requires CPU version; --arm-cpu option should be set.")
elseif(TARGET_ARCH STREQUAL "arm" AND HARDFLOAT STREQUAL "false")
    set(ARMCPUOPTION "-mcpu=${ARMCPU}")
else()
    set(ARMCPUOPTION "")
endif()

set(IS_WINDOWS_7 "false")
if(WIN32)
    # Detect if the system is Windows 7
    execute_process(
        COMMAND julia -e "print(Sys.iswindows() && Sys.windows_version().major == 6 && Sys.windows_version().minor == 1)"
        OUTPUT_VARIABLE WINDOWS_VERSION
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    if(WINDOWS_VERSION STREQUAL "true")
        set(IS_WINDOWS_7 "true")
    endif()
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O2 -fno-sanitize=undefined -fno-stack-protector ")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -w -O2 -fno-sanitize=undefined -fno-stack-protector")
if (NOT (DEFINED USE_MSVC))
    set(FINAL_ARGS -Wl,--as-needed -Wno-unused-variable -Wno-unused-value)
endif()
set(ZIG_EXTRA_EXE "")

if("${TARGET_OS}" STREQUAL "windows")
    list(APPEND FINAL_ARGS "-DWIN32_LEAN_AND_MEAN")
    if("${STATIC_MINGW}" STREQUAL "true")
        list(APPEND FINAL_ARGS "-static" "-lstdc++")
        # if not using zig
        if("${IS_WINDOWS_7}" STREQUAL "true")
            list(APPEND FINAL_ARGS "-fsanitize=undefined" "-Wl,-Bstatic" "-lstdc++" "-lpthread" "-Wl,-Bdynamic")
        endif()
    endif()
elseif("${TARGET_OS}" STREQUAL "linux")
    list(APPEND FINAL_ARGS "-ldl" "-lpthread")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE")
elseif("${TARGET_OS}" STREQUAL "macos")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_DARWIN_C_SOURCE")
endif()


function(decide_zig_target os arch endianness glibc_version libc hardfloat result)
    if ("${os}" STREQUAL "windows")
        if("${arch}" STREQUAL "x86_64")
            set(${result} "x86_64-windows-gnu" PARENT_SCOPE)
        else()
            message(FATAL_ERROR "Unsupported architecture ${arch} for ${os}")
        endif()
    elseif ("${os}" STREQUAL "linux")
        if("${arch}" STREQUAL "x86_64")
            if("${libc}" STREQUAL "glibc")
                set(${result} "x86_64-linux-gnu.${glibc_version}" PARENT_SCOPE)
            elseif("${libc}" STREQUAL "musl")
                set(${result} "x86_64-linux-musl" PARENT_SCOPE)
            else()
                message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
            endif()
        elseif("${arch}" STREQUAL "aarch64")
            if("${endianness}" STREQUAL "little")
                if("${libc}" STREQUAL "glibc")
                    set(${result} "aarch64-linux-gnu.${glibc_version}" PARENT_SCOPE)
                elseif("${libc}" STREQUAL "musl")
                    set(${result} "aarch64-linux-musl" PARENT_SCOPE)
                else()
                    message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                endif()
            else()
                if("${libc}" STREQUAL "glibc")
                    set(${result} "aarch64_be-linux-gnu.${glibc_version}" PARENT_SCOPE)
                elseif("${libc}" STREQUAL "musl")
                    set(${result} "aarch64_be-linux-musl" PARENT_SCOPE)
                else()
                    message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                endif()
            endif()
        elseif("${arch}" STREQUAL "arm")
            if("${endianness}" STREQUAL "little")
                if("${hardfloat}" STREQUAL "true")
                    if("${libc}" STREQUAL "glibc")
                        set(${result} "arm-linux-gnueabihf" PARENT_SCOPE)
                    elseif("${libc}" STREQUAL "musl")
                        set(${result} "arm-linux-musleabihf" PARENT_SCOPE)
                    else()
                        message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                    endif()
                else()
                    if("${libc}" STREQUAL "glibc")
                        set(${result} "arm-linux-gnueabi" PARENT_SCOPE)
                    elseif("${libc}" STREQUAL "musl")
                        set(${result} "arm-linux-musleabi" PARENT_SCOPE)
                    else()
                        message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                    endif()
                endif()
            # big endiness
            else()
                if("${hardfloat}" STREQUAL "true")
                    if("${libc}" STREQUAL "glibc")
                        set(${result} "armeb-linux-gnueabihf" PARENT_SCOPE)
                    elseif("${libc}" STREQUAL "musl")
                        set(${result} "armeb-linux-musleabihf" PARENT_SCOPE)
                    else()
                        message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                    endif()
                else()
                    if("${libc}" STREQUAL "glibc")
                        set(${result} "armeb-linux-gnueabi" PARENT_SCOPE)
                    elseif("${libc}" STREQUAL "musl")
                        set(${result} "armeb-linux-musleabi" PARENT_SCOPE)
                    else()
                        message(FATAL_ERROR "Unsupported libc ${libc} for ${os}")
                    endif()
                endif()
            endif()
        else()
            message(FATAL_ERROR "Unsupported architecture ${arch} for ${os}")
        endif()
    elseif("${os}" STREQUAL "macos")
        if("${arch}" STREQUAL "x86_64")
            set(${result} "x86_64-macos-none" PARENT_SCOPE)
        elseif("${arch}" STREQUAL "aarch64")
            set(${result} "aarch64-macos-none" PARENT_SCOPE)
        else()
            message(FATAL_ERROR "Unsupported architecture ${arch} for ${os}")
        endif()
    else()
        message(FATAL_ERROR "Unsupported OS ${os}-${arch}")
    endif()
endfunction()

function(has_toolchain compiler_name result)
    find_program(_EXECUTABLE ${compiler_name})
    if(_EXECUTABLE)
        set(${result} "true" PARENT_SCOPE)
    else()
        set(${result} "false" PARENT_SCOPE)
    endif()
endfunction()

set(HAS_ZIG "false")
if("${IS_WINDOWS_7}" STREQUAL "false")
    has_toolchain("zig" HAS_ZIG)
endif()
set(HAS_GCC "false")
has_toolchain("gcc" HAS_GCC)


message(STATUS "Has zig: ${HAS_ZIG}")
message(STATUS "Has gcc: ${HAS_GCC}")
set(C_TOOLCHAIN "")

# Detect processor architecture
if(NOT CMAKE_HOST_SYSTEM_PROCESSOR)
    if(CMAKE_HOST_WIN32)
        execute_process(
            COMMAND wmic os get osarchitecture
            OUTPUT_VARIABLE ARCHITECTURE_OUTPUT
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
        if(ARCHITECTURE_OUTPUT MATCHES "64-bit")
            set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")
        elseif(ARCHITECTURE_OUTPUT MATCHES "32-bit")
            set(CMAKE_HOST_SYSTEM_PROCESSOR "x86")
        elseif(ARCHITECTURE_OUTPUT MATCHES "ARM64")
            set(CMAKE_HOST_SYSTEM_PROCESSOR "aarch64")
        elseif(ARCHITECTURE_OUTPUT MATCHES "ARM")
            set(CMAKE_HOST_SYSTEM_PROCESSOR "arm")
        endif()
    else()
        execute_process(
            COMMAND uname -m
            OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
    endif()
endif()


set(IS_CROSSCOMPILING "false")
string(TOLOWER "${CMAKE_HOST_SYSTEM_NAME}" CMAKE_HOST_SYSTEM_NAME_LOWER)
if(NOT "${CMAKE_HOST_SYSTEM_NAME_LOWER}" STREQUAL "${TARGET_OS}" OR NOT "${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "${TARGET_ARCH}")
    set(IS_CROSSCOMPILING "true")
endif()


# If not Windows 7 and it has zig in the current environment, set the zig compiler
if("${IS_WINDOWS_7}" STREQUAL "false" )
    if ("${HAS_ZIG}" STREQUAL "true")
        set(C_TOOLCHAIN "zig")
        if("${TARGET_OS}" STREQUAL "macos")
            set(CMAKE_SYSTEM_NAME "Darwin")
        elseif("${TARGET_OS}" STREQUAL "linux")
            set(CMAKE_SYSTEM_NAME "Linux")
        elseif("${TARGET_OS}" STREQUAL "windows")
            set(CMAKE_SYSTEM_NAME "Windows")
        endif()
        # CMAKE_SYSTEM_PROCESSOR is corresponding to the TARGET_ARCH set by SYSLABCC only within limited cases, like x86_64, aarch64, arm.
        set(CMAKE_SYSTEM_PROCESSOR ${TARGET_ARCH})

        decide_zig_target("${TARGET_OS}" "${TARGET_ARCH}" "${ENDIANNESS}" "${GLIBC_VERSION}" "${LIBC}" "${HARDFLOAT}" ZIG_TARGET)

        message(STATUS "Using Zig target: ${ZIG_TARGET}")
        set(CMAKE_C_COMPILER "zig" cc --target=${ZIG_TARGET})
        set(CMAKE_CXX_COMPILER "zig" c++ --target=${ZIG_TARGET})

        if(WIN32)
            set(SCRIPT_SUFFIX ".cmd")
        else()
            set(SCRIPT_SUFFIX ".sh")
        endif()

        set(CMAKE_AR "${CMAKE_SOURCE_DIR}/cmakeconfig/zig-ar${SCRIPT_SUFFIX}")
        set(CMAKE_RANLIB "${CMAKE_SOURCE_DIR}/cmakeconfig/zig-ranlib${SCRIPT_SUFFIX}")

        set(ZIG_EXTRA_EXE "-fno-lto")
    elseif("${HAS_GCC}" STREQUAL "true")
        set(C_TOOLCHAIN "gcc")
        set(CMAKE_C_COMPILER "gcc")
        set(CMAKE_CXX_COMPILER "g++")
        set(CMAKE_AR "ar")
        set(CMAKE_RANLIB "ranlib")
        if ("${IS_CROSSCOMPILING}" STREQUAL "true")
            message(FATAL_ERROR "Cross-compiling with gcc is not supported")
        endif()
    else()
        message(FATAL_ERROR "No zig or gcc compiler found")
    endif()

# if host system is Windows 7, use gcc
else()
    set(C_TOOLCHAIN "gcc")
    if ("${IS_CROSSCOMPILING}" STREQUAL "true")
        message(FATAL_ERROR "Cross-compiling on Windows 7 is not supported")
    endif()
endif()