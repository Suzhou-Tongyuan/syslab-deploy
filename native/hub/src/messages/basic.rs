#![allow(unused_imports)]

use prost::Message;
use rinf::{
    debug_print, send_rust_signal, signal_channel,
    DartSignal, SignalReceiver, SignalSender,
};
use std::sync::LazyLock;


// @generated
// This file is @generated by prost-build.
/// \[DART-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericDartSignal {
    #[prost(string, tag="1")]
    pub text: ::prost::alloc::string::String,
}
/// \[RUST-SIGNAL\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericRustSignal {
    #[prost(string, tag="1")]
    pub text: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)

type GenericDartSignalChannel = LazyLock<(
    SignalSender<DartSignal<GenericDartSignal>>,
    SignalReceiver<DartSignal<GenericDartSignal>>,
)>;
pub static GENERIC_DART_SIGNAL_CHANNEL: GenericDartSignalChannel =
    LazyLock::new(signal_channel);

impl GenericDartSignal {
    pub fn get_dart_signal_receiver() -> SignalReceiver<DartSignal<Self>> {
        GENERIC_DART_SIGNAL_CHANNEL.1.clone()
    }
}

impl GenericRustSignal {
    pub fn send_signal_to_dart(&self) {
        let result = send_rust_signal(
            1,
            self.encode_to_vec(),
            Vec::new(),
        );
        if let Err(error) = result {
            debug_print!("{error}\n{self:?}");
        }
    }
}
