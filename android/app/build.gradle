plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.syslab_deploy"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.syslab_deploy"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    // below are the configurations for Rust and libc++_shared.so
    // in short, we copy the libc++_shared.so from NDK to JniLibs and clean it after assembling
     afterEvaluate {
        def ndkDir = android.ndkDirectory
        // Determine host OS and architecture dynamically
        def hostOs = System.properties['os.name'].toLowerCase()
        def hostArch = System.properties['os.arch'].toLowerCase()

        def hostPlatform
        if (hostOs.contains('windows')) {
            hostPlatform = 'windows-x86_64'
        } else if (hostOs.contains('mac')) {
            hostPlatform = hostArch.contains('aarch64') ? 'darwin-arm64' : 'darwin-x86_64'
        } else if (hostOs.contains('linux')) {
            hostPlatform = 'linux-x86_64'
        } else {
            throw new GradleException("Unsupported host OS: ${hostOs}")
        }

        def libCppDir = "${ndkDir}/toolchains/llvm/prebuilt/${hostPlatform}/sysroot/usr/lib"
        def jniLibsDir = "${projectDir}/src/main/jniLibs"

        // Map of Android ABIs to NDK architecture directories
        def abiMap = [
            'armeabi-v7a': 'arm-linux-androideabi',
            'arm64-v8a': 'aarch64-linux-android',
            'x86': 'i686-linux-android',
            'x86_64': 'x86_64-linux-android'
        ]
        def abis = abiMap.keySet() as List

        task cleanJniLibs {
            doLast {
                abis.each { abi ->
                    def libcSoDest = file("$jniLibsDir/$abi/libc++_shared.so")
                    if (libcSoDest.exists()) {
                        println "Deleting $libcSoDest"
                        libcSoDest.delete()
                    }
                }
            }
        }

        task copyLibcxxShared {
            doLast {
                println "Now let's make libhub.so happy ;)"
                abis.each { abi ->
                    def archDir = abiMap[abi]
                    def libcSoSrc = file("$libCppDir/$archDir/libc++_shared.so")
                    def libcSoDest = file("$jniLibsDir/$abi/libc++_shared.so")
                    if (libcSoSrc.exists()) {
                        println "Copying $libcSoSrc to $libcSoDest"
                        copy {
                            from libcSoSrc
                            into "$jniLibsDir/$abi"
                        }
                    } else {
                        throw new Exception("libc++_shared.so for ABI $abi not found in NDK at $libCppDir/$archDir")
                    }
                }
            }
        }
        // when merging JniLibs, first clean then copy
        tasks.matching {
            it.name.startsWith('merge') && it.name.contains('JniLib')
        }.all { task ->
            task.dependsOn cleanJniLibs
            task.dependsOn copyLibcxxShared
        }
        // after assembling, clean JniLibs
        tasks.matching {
            it.name.startsWith('assemble') || it.name.contains('build')
        }.all { task ->
            // avoid using task.finalizedBy(cleanJniLibs) because it will cause circular dependency
            task.doLast {
                println "Cleaning JniLibs after $task.name"
                cleanJniLibs.actions.each {
                    it.execute(task)
                }
            }
        }
    }
}

flutter {
    source = "../.."
}
